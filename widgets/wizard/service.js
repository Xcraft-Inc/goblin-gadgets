'use strict';

const path = require ('path');
const goblinName = path.basename (module.parent.filename, '.js');
const Goblin = require ('xcraft-core-goblin');
const uuidV4 = require ('uuid/v4');

// Define initial logic values
const logicState = {};

const params = {
  Button: {
    id: 'Button',
    kind: {
      id: 'kind',
      group: 'Aspect',
      type: 'combo',
      field: 'kind',
      list: [
        '',
        'action',
        'calendar',
        'calendar-navigation',
        'chronos-navigator',
        'combo',
        'footer',
        'frameless',
        'glyph-item',
        'identity',
        'label',
        'main-tab',
        'main-tab-right',
        'menu-item',
        'notification',
        'notification-close',
        'pane-navigator',
        'pane-hnavigator',
        'pane-vnavigator',
        'recurrence',
        'round',
        'subaction',
        'task-bar',
        'task-tab',
        'task-logo',
        'thin-left',
        'thin-right',
        'tray-title',
        'view-tab',
        'view-tab-right',
        'warning',
      ],
      value: '',
    },
    active: {
      id: 'active',
      group: 'Aspect',
      type: 'bool',
      field: 'active',
      value: 'false',
    },
    disabled: {
      id: 'disabled',
      group: 'Aspect',
      type: 'bool',
      field: 'disabled',
      value: 'false',
    },
    text: {
      id: 'text',
      group: 'Text',
      type: 'text',
      field: 'text',
      list: [
        '',
        'Button',
        "D'accord",
        'Annuler',
        'Enregistrer',
        'Ouvrir le dossier',
      ],
      value: 'Button',
    },
    glyph: {
      id: 'glyph',
      group: 'Glyph',
      type: 'text',
      field: 'glyph',
      list: ['', 'check', 'close', 'bicycle', 'car', 'rocket', 'calendar'],
      value: 'check',
    },
    glyphRotate: {
      id: 'glyphRotate',
      group: 'Glyph',
      type: 'combo',
      field: 'glyphRotate',
      list: ['', '90', '180', '270'],
      value: '',
    },
    glyphFlip: {
      id: 'glyphFlip',
      group: 'Glyph',
      type: 'combo',
      field: 'glyphFlip',
      list: ['', 'horizontal', 'vertical'],
      value: '',
    },
    glyphSpin: {
      id: 'glyphSpin',
      group: 'Glyph',
      type: 'combo',
      field: 'glyphSpin',
      list: ['', 'yes'],
      value: '',
    },
    glyphPosition: {
      id: 'glyphPosition',
      group: 'Glyph',
      type: 'combo',
      field: 'glyphPosition',
      list: ['', 'left', 'right'],
      value: '',
    },
    shape: {
      id: 'shape',
      group: 'Aspect',
      type: 'combo',
      field: 'shape',
      list: [
        '',
        'rounded',
        'left-rounded',
        'right-rounded',
        'left-smooth',
        'right-smooth',
      ],
      value: '',
    },
    tooltip: {
      id: 'tooltip',
      group: 'Aspect',
      type: 'text',
      field: 'tooltip',
      value: '',
    },
    shortcut: {
      id: 'shortcut',
      group: 'Aspect',
      type: 'text',
      field: 'shortcut',
      list: ['', '_ctrl_+A', '_shift_+A', '_alt_+A'],
      value: '',
    },
    justify: {
      id: 'justify',
      group: 'Aspect',
      type: 'combo',
      field: 'justify',
      list: ['', 'start', 'center', 'end', 'around', 'between', 'none'],
      value: '',
    },
    width: {
      id: 'width',
      group: 'Layout',
      type: 'text',
      unit: 'px',
      field: 'width',
      list: ['', '32px', '50px', '100px', '150px', '200px', '300px', '500px'],
      value: '',
    },
    height: {
      id: 'height',
      group: 'Layout',
      type: 'text',
      unit: 'px',
      field: 'height',
      list: ['', '32px', '50px', '100px', '150px', '200px'],
      value: '',
    },
    grow: {
      id: 'grow',
      group: 'Layout',
      type: 'text',
      field: 'grow',
      list: ['', '0.5', '1'],
      value: '',
    },
    spacing: {
      id: 'spacing',
      group: 'Layout',
      type: 'combo',
      field: 'spacing',
      list: ['', 'overlap', 'tiny', 'large'],
      value: '',
    },
    glyphColor: {
      id: 'glyphColor',
      group: 'Glyph',
      type: 'text',
      field: 'glyphColor',
      list: [
        '',
        'primary',
        'secondary',
        'base',
        'white',
        'lightgrey',
        'grey',
        'black',
        'red',
        'green',
        'blue',
        'yellow',
        '#68a',
      ],
      value: '',
    },
    textColor: {
      id: 'textColor',
      group: 'Text',
      type: 'text',
      field: 'textColor',
      list: [
        '',
        'primary',
        'secondary',
        'base',
        'white',
        'lightgrey',
        'grey',
        'black',
        'red',
        'green',
        'blue',
        'yellow',
        '#68a',
      ],
      value: '',
    },
    backgroundColor: {
      id: 'backgroundColor',
      group: 'Aspect',
      type: 'text',
      field: 'backgroundColor',
      list: [
        '',
        'primary',
        'secondary',
        'base',
        'white',
        'lightgrey',
        'grey',
        'black',
        'red',
        'green',
        'blue',
        'yellow',
        '#68a',
      ],
      value: '',
    },
    activeColor: {
      id: 'activeColor',
      group: 'Aspect',
      type: 'text',
      field: 'activeColor',
      list: [
        '',
        'primary',
        'secondary',
        'base',
        'white',
        'lightgrey',
        'grey',
        'black',
        'red',
        'green',
        'blue',
        'yellow',
        '#68a',
      ],
      value: '',
    },
    textTransform: {
      id: 'textTransform',
      group: 'Text',
      type: 'combo',
      field: 'textTransform',
      list: ['', 'uppercase', 'none'],
      value: '',
    },
    badgeValue: {
      id: 'badgeValue',
      group: 'Badge',
      type: 'text',
      field: 'badgeValue',
      list: ['', '1', '2', '99'],
      value: '',
    },
    badgePush: {
      id: 'badgePush',
      group: 'Badge',
      type: 'bool',
      field: 'badgePush',
      value: '',
    },
    place: {
      id: 'place',
      group: 'Aspect',
      type: 'combo',
      field: 'place',
      list: ['', '1/1', '1/3', '2/3', '3/3'],
      value: '',
    },
    calendarWeekend: {
      id: 'calendarWeekend',
      group: 'Calendar',
      type: 'bool',
      field: 'calendarWeekend',
      value: '',
    },
    calendarDimmed: {
      id: 'calendarDimmed',
      group: 'Calendar',
      type: 'bool',
      field: 'calendarDimmed',
      value: '',
    },
    cursor: {
      id: 'cursor',
      group: 'Aspect',
      type: 'combo',
      field: 'cursor',
      list: [
        '',
        'default',
        'none',
        'pointer',
        'cell',
        'crosshair',
        'text',
        'move',
        'not-allowed',
        'ew-resize',
        'ns-resize',
        'grab',
      ],
      value: '',
    },
    show: {
      id: 'show',
      group: 'Aspect',
      type: 'bool',
      field: 'show',
      value: 'true',
    },
    visibility: {
      id: 'visibility',
      group: 'Aspect',
      type: 'bool',
      field: 'visibility',
      value: 'true',
    },
  },
  Label: {
    id: 'Label',
    kind: {
      id: 'kind',
      group: 'Aspect',
      type: 'combo',
      field: 'kind',
      list: [
        '',
        'big-center',
        'center-to-box',
        'floating-footer',
        'floating-header',
        'flying-balloon',
        'footer',
        'info',
        'large-left',
        'large-right',
        'large-single',
        'notification',
        'one-line-height',
        'pane-header',
        'task',
        'ticket-warning',
        'title',
        'title-recurrence',
      ],
      value: '',
    },
    disabled: {
      id: 'disabled',
      group: 'Aspect',
      type: 'bool',
      field: 'disabled',
      value: 'false',
    },
    text: {
      id: 'text',
      group: 'Text',
      type: 'text',
      field: 'text',
      list: [
        '',
        'Label',
        'Long mot (anticonstitutionnellement) pour tester le mode wrap',
        'Première ligne<br/>Deuxième ligne',
        'Normal <em>sélectionné</em> normal',
      ],
      value: 'Label',
    },
    glyph: {
      id: 'glyph',
      group: 'Glyph',
      type: 'text',
      field: 'glyph',
      list: ['', 'check', 'close', 'bicycle', 'car', 'rocket', 'calendar'],
      value: 'rocket',
    },
    glyphRotate: {
      id: 'glyphRotate',
      group: 'Glyph',
      type: 'combo',
      field: 'glyphRotate',
      list: ['', '90', '180', '270'],
      value: '',
    },
    glyphFlip: {
      id: 'glyphFlip',
      group: 'Glyph',
      type: 'combo',
      field: 'glyphFlip',
      list: ['', 'horizontal', 'vertical'],
      value: '',
    },
    glyphSpin: {
      id: 'glyphSpin',
      group: 'Glyph',
      type: 'combo',
      field: 'glyphSpin',
      list: ['', 'yes'],
      value: '',
    },
    glyphPosition: {
      id: 'glyphPosition',
      group: 'Glyph',
      type: 'combo',
      field: 'glyphPosition',
      list: ['', 'left', 'right'],
      value: '',
    },
    insideButton: {
      id: 'insideButton',
      group: 'Aspect',
      type: 'bool',
      field: 'insideButton',
      value: 'false',
    },
    tooltip: {
      id: 'tooltip',
      group: 'Aspect',
      type: 'text',
      field: 'tooltip',
      value: '',
    },
    justify: {
      id: 'justify',
      group: 'Aspect',
      type: 'combo',
      field: 'justify',
      list: ['', 'start', 'center', 'end', 'around', 'between', 'none'],
      value: '',
    },
    width: {
      id: 'width',
      group: 'Layout',
      type: 'text',
      unit: 'px',
      field: 'width',
      list: ['', '32px', '50px', '100px', '150px', '200px', '300px', '500px'],
      value: '',
    },
    height: {
      id: 'height',
      group: 'Layout',
      type: 'text',
      unit: 'px',
      field: 'height',
      list: ['', '32px', '50px', '100px', '150px', '200px'],
      value: '',
    },
    grow: {
      id: 'grow',
      group: 'Layout',
      type: 'text',
      field: 'grow',
      list: ['', '0.5', '1'],
      value: '',
    },
    spacing: {
      id: 'spacing',
      group: 'Layout',
      type: 'combo',
      field: 'spacing',
      list: ['', 'overlap', 'tiny', 'large'],
      value: '',
    },
    bottomSpacing: {
      id: 'bottomSpacing',
      group: 'Layout',
      type: 'combo',
      field: 'bottomSpacing',
      list: ['', 'large'],
      value: '',
    },
    vpos: {
      id: 'vpos',
      group: 'Layout',
      type: 'combo',
      field: 'vpos',
      list: ['', 'top'],
      value: '',
    },
    glyphColor: {
      id: 'glyphColor',
      group: 'Glyph',
      type: 'text',
      field: 'glyphColor',
      list: [
        '',
        'primary',
        'secondary',
        'base',
        'white',
        'lightgrey',
        'grey',
        'black',
        'red',
        'green',
        'blue',
        'yellow',
        '#68a',
      ],
      value: '',
    },
    textColor: {
      id: 'textColor',
      group: 'Text',
      type: 'text',
      field: 'textColor',
      list: [
        '',
        'primary',
        'secondary',
        'base',
        'white',
        'lightgrey',
        'grey',
        'black',
        'red',
        'green',
        'blue',
        'yellow',
        '#68a',
      ],
      value: '',
    },
    backgroundColor: {
      id: 'backgroundColor',
      group: 'Aspect',
      type: 'text',
      field: 'backgroundColor',
      list: [
        '',
        'primary',
        'secondary',
        'base',
        'white',
        'lightgrey',
        'grey',
        'black',
        'red',
        'green',
        'blue',
        'yellow',
        '#68a',
      ],
      value: '',
    },
    glyphSize: {
      id: 'glyphSize',
      group: 'Glyph',
      type: 'combo',
      field: 'glyphSize',
      list: ['', '50%', '75%', '100%', '150%', '200%'],
      value: '',
    },
    fontSize: {
      id: 'fontSize',
      group: 'Text',
      type: 'combo',
      field: 'fontSize',
      list: ['', '50%', '75%', '100%', '150%', '200%'],
      value: '',
    },
    fontWeight: {
      id: 'fontWeight',
      group: 'Text',
      type: 'combo',
      field: 'fontWeight',
      list: ['', 'bold'],
      value: '',
    },
    fontStyle: {
      id: 'fontStyle',
      group: 'Text',
      type: 'combo',
      field: 'fontStyle',
      list: ['', 'italic', 'oblique'],
      value: '',
    },
    textTransform: {
      id: 'textTransform',
      group: 'Text',
      type: 'combo',
      field: 'textTransform',
      list: ['', 'uppercase', 'none'],
      value: '',
    },
    wrap: {
      id: 'wrap',
      group: 'Text',
      type: 'combo',
      field: 'wrap',
      list: ['', 'no', 'stretch', 'break-word'],
      value: '',
    },
    cursor: {
      id: 'cursor',
      group: 'Aspect',
      type: 'combo',
      field: 'cursor',
      list: [
        '',
        'default',
        'none',
        'pointer',
        'cell',
        'crosshair',
        'text',
        'move',
        'not-allowed',
        'ew-resize',
        'ns-resize',
        'grab',
      ],
      value: '',
    },
    show: {
      id: 'show',
      group: 'Aspect',
      type: 'bool',
      field: 'show',
      value: 'true',
    },
    visibility: {
      id: 'visibility',
      group: 'Aspect',
      type: 'bool',
      field: 'visibility',
      value: 'true',
    },
  },
  TextField: {
    id: 'TextField',
    active: {
      id: 'active',
      group: 'Aspect',
      type: 'bool',
      field: 'active',
      value: 'false',
    },
    disabled: {
      id: 'disabled',
      group: 'Aspect',
      type: 'bool',
      field: 'disabled',
      value: 'false',
    },
    readonly: {
      id: 'readonly',
      group: 'Text',
      type: 'bool',
      field: 'readonly',
      value: 'false',
    },
    defaultValue: {
      id: 'defaultValue',
      group: 'Text',
      type: 'text',
      field: 'defaultValue',
      list: ['', 'TextField', 'Jean Dupond', 'Lausanne'],
      value: 'TextField',
    },
    hintText: {
      id: 'hintText',
      group: 'Text',
      type: 'text',
      field: 'hintText',
      list: ['', 'Prénom et nom', 'Adresse', 'Ville'],
      value: 'Prénom et nom',
    },
    tooltip: {
      id: 'tooltip',
      group: 'Aspect',
      type: 'text',
      field: 'tooltip',
      value: '',
    },
    shape: {
      id: 'shape',
      group: 'Aspect',
      type: 'combo',
      field: 'shape',
      list: [
        '',
        'rounded',
        'left-rounded',
        'right-rounded',
        'left-smooth',
        'right-smooth',
      ],
      value: '',
    },
    rows: {
      id: 'rows',
      group: 'Text',
      type: 'combo',
      field: 'rows',
      list: ['', '1', '2', '3', '4', '5', '10'],
      value: '',
    },
    size: {
      id: 'size',
      group: 'Text',
      type: 'combo',
      field: 'size',
      list: ['', '1', '10', '100'],
      value: '',
    },
    maxLength: {
      id: 'maxLength',
      group: 'Text',
      type: 'combo',
      field: 'maxLength',
      list: ['', '1', '10', '20', '100'],
      value: '',
    },
    messageInfo: {
      id: 'messageInfo',
      group: 'Message',
      type: 'text',
      field: 'messageInfo',
      value: '',
    },
    messageWarning: {
      id: 'messageWarning',
      group: 'Message',
      type: 'text',
      field: 'messageWarning',
      value: '',
    },
    flyingBalloonAnchor: {
      id: 'flyingBalloonAnchor',
      group: 'Message',
      type: 'combo',
      field: 'flyingBalloonAnchor',
      list: ['left', 'right', 'top', 'bottom'],
      value: 'bottom',
    },
    width: {
      id: 'width',
      group: 'Layout',
      type: 'text',
      unit: 'px',
      field: 'width',
      list: ['', '32px', '50px', '100px', '150px', '200px', '300px', '500px'],
      value: '',
    },
    grow: {
      id: 'grow',
      group: 'Layout',
      type: 'text',
      field: 'grow',
      list: ['', '0.5', '1'],
      value: '1',
    },
    spacing: {
      id: 'spacing',
      group: 'Layout',
      type: 'combo',
      field: 'spacing',
      list: ['', 'overlap', 'tiny', 'large'],
      value: '',
    },
    cursor: {
      id: 'cursor',
      group: 'Aspect',
      type: 'combo',
      field: 'cursor',
      list: [
        '',
        'default',
        'none',
        'pointer',
        'cell',
        'crosshair',
        'text',
        'move',
        'not-allowed',
        'ew-resize',
        'ns-resize',
        'grab',
      ],
      value: '',
    },
    show: {
      id: 'show',
      group: 'Aspect',
      type: 'bool',
      field: 'show',
      value: 'true',
    },
    visibility: {
      id: 'visibility',
      group: 'Aspect',
      type: 'bool',
      field: 'visibility',
      value: 'true',
    },
  },
  LabelTextField: {
    id: 'LabelTextField',
    disabled: {
      id: 'disabled',
      group: 'Aspect',
      type: 'bool',
      field: 'disabled',
      value: 'false',
    },
    readonly: {
      id: 'readonly',
      group: 'Text',
      type: 'bool',
      field: 'readonly',
      value: 'false',
    },
    defaultValue: {
      id: 'defaultValue',
      group: 'Text',
      type: 'text',
      field: 'defaultValue',
      list: ['', 'LabelTextField', 'Jean Dupond'],
      value: 'LabelTextField',
    },
    labelText: {
      id: 'labelText',
      group: 'Label',
      type: 'text',
      field: 'labelText',
      list: ['', 'Label', 'Nom', 'Prénom', 'Adresse', 'Ville'],
      value: '',
    },
    labelGlyph: {
      id: 'labelGlyph',
      group: 'Label',
      type: 'text',
      field: 'labelGlyph',
      list: ['', 'check', 'close', 'bicycle', 'car', 'rocket', 'calendar'],
      value: 'car',
    },
    shape: {
      id: 'shape',
      group: 'Aspect',
      type: 'combo',
      field: 'shape',
      list: ['', 'rounded', 'smooth'],
      value: '',
    },
    messageInfo: {
      id: 'messageInfo',
      group: 'Message',
      type: 'text',
      field: 'messageInfo',
      value: '',
    },
    messageWarning: {
      id: 'messageWarning',
      group: 'Message',
      type: 'text',
      field: 'messageWarning',
      value: '',
    },
    hintText: {
      id: 'hintText',
      group: 'Text',
      type: 'text',
      field: 'hintText',
      list: ['', 'Prénom et nom', 'Adresse'],
      value: 'Adresse',
    },
    tooltip: {
      id: 'tooltip',
      group: 'Aspect',
      type: 'text',
      field: 'tooltip',
      value: '',
    },
    width: {
      id: 'width',
      group: 'Layout',
      type: 'text',
      unit: 'px',
      field: 'width',
      list: ['', '32px', '50px', '100px', '150px', '200px', '300px', '500px'],
      value: '',
    },
    labelWidth: {
      id: 'labelWidth',
      group: 'Label',
      type: 'text',
      unit: 'px',
      field: 'labelWidth',
      list: ['', '32px', '50px', '100px', '150px', '200px', '300px', '500px'],
      value: '',
    },
    fieldWidth: {
      id: 'fieldWidth',
      group: 'Text',
      type: 'text',
      unit: 'px',
      field: 'fieldWidth',
      list: ['', '32px', '50px', '100px', '150px', '200px', '300px', '500px'],
      value: '',
    },
    grow: {
      id: 'grow',
      group: 'Layout',
      type: 'text',
      field: 'grow',
      list: ['', '0.5', '1'],
      value: '1',
    },
    spacing: {
      id: 'spacing',
      group: 'Layout',
      type: 'combo',
      field: 'spacing',
      list: ['', 'overlap', 'tiny', 'large'],
      value: '',
    },
    cursor: {
      id: 'cursor',
      group: 'Aspect',
      type: 'combo',
      field: 'cursor',
      list: [
        '',
        'default',
        'none',
        'pointer',
        'cell',
        'crosshair',
        'text',
        'move',
        'not-allowed',
        'ew-resize',
        'ns-resize',
        'grab',
      ],
      value: '',
    },
    show: {
      id: 'show',
      group: 'Aspect',
      type: 'bool',
      field: 'show',
      value: 'true',
    },
    visibility: {
      id: 'visibility',
      group: 'Aspect',
      type: 'bool',
      field: 'visibility',
      value: 'true',
    },
  },
  TextFieldCombo: {
    id: 'TextFieldCombo',
    disabled: {
      id: 'disabled',
      group: 'Aspect',
      type: 'bool',
      field: 'disabled',
      value: 'false',
    },
    readonly: {
      id: 'readonly',
      group: 'Text',
      type: 'bool',
      field: 'readonly',
      value: 'false',
    },
    defaultValue: {
      id: 'defaultValue',
      group: 'Text',
      type: 'text',
      field: 'defaultValue',
      list: ['', 'TextFieldCombo', 'Jean Dupond', 'Lausanne'],
      value: 'TextFieldCombo',
    },
    selectedValue: {
      id: 'selectedValue',
      group: 'Text',
      type: 'text',
      field: 'selectedValue',
      list: [
        '',
        'Lundi',
        'Mardi',
        'Mercredi',
        'Jeudi',
        'Vendredi',
        'Samedi',
        'Dimanche',
      ],
      value: '',
    },
    comboGlyph: {
      id: 'comboGlyph',
      group: 'Aspect',
      type: 'text',
      field: 'comboGlyph',
      list: ['', 'check', 'close', 'bicycle', 'car', 'rocket', 'calendar'],
      value: '',
    },
    shape: {
      id: 'shape',
      group: 'Aspect',
      type: 'combo',
      field: 'shape',
      list: ['', 'rounded', 'smooth'],
      value: '',
    },
    messageInfo: {
      id: 'messageInfo',
      group: 'Message',
      type: 'text',
      field: 'messageInfo',
      value: '',
    },
    messageWarning: {
      id: 'messageWarning',
      group: 'Message',
      type: 'text',
      field: 'messageWarning',
      value: '',
    },
    hintText: {
      id: 'hintText',
      group: 'Text',
      type: 'text',
      field: 'hintText',
      list: ['', 'Jour de la semaine', 'Prénom et nom', 'Adresse'],
      value: 'Jour de la semaine',
    },
    tooltip: {
      id: 'tooltip',
      group: 'Aspect',
      type: 'text',
      field: 'tooltip',
      value: '',
    },
    width: {
      id: 'width',
      group: 'Layout',
      type: 'text',
      unit: 'px',
      field: 'width',
      list: ['', '32px', '50px', '100px', '150px', '200px', '300px', '500px'],
      value: '',
    },
    grow: {
      id: 'grow',
      group: 'Layout',
      type: 'text',
      field: 'grow',
      list: ['', '0.5', '1'],
      value: '1',
    },
    spacing: {
      id: 'spacing',
      group: 'Layout',
      type: 'combo',
      field: 'spacing',
      list: ['', 'overlap', 'tiny', 'large'],
      value: '',
    },
    cursor: {
      id: 'cursor',
      group: 'Aspect',
      type: 'combo',
      field: 'cursor',
      list: [
        '',
        'default',
        'none',
        'pointer',
        'cell',
        'crosshair',
        'text',
        'move',
        'not-allowed',
        'ew-resize',
        'ns-resize',
        'grab',
      ],
      value: '',
    },
    show: {
      id: 'show',
      group: 'Aspect',
      type: 'bool',
      field: 'show',
      value: 'true',
    },
    visibility: {
      id: 'visibility',
      group: 'Aspect',
      type: 'bool',
      field: 'visibility',
      value: 'true',
    },
  },
};

function convertToMapWithIds (data) {
  const result = {};
  let order = 0;
  for (const item of data) {
    const id = uuidV4 ();
    item.id = id;
    item.order = order++;
    result[id] = item;
  }
  return result;
}

//?const params = convertToMapWithIds (data);

// Define logic handlers according rc.json
const logicHandlers = {
  create: (state, action) => {
    const initialState = {
      id: action.get ('id'),
      params: params,
    };
    return state.set ('', initialState);
  },
};

// Register quest's according rc.json
Goblin.registerQuest (goblinName, 'create', function (quest, desktopId) {
  const desk = quest.useAs ('desktop', desktopId);
  desk.addTab ({
    name: 'Wizard',
    contextId: 'test',
    view: 'test-wizard',
    workitemId: quest.goblin.id,
  });
  quest.do ();
  return quest.goblin.id;
});

Goblin.registerQuest (goblinName, 'delete', function () {});

Object.keys (params).forEach (w => {
  const wizard = params[w];
  Object.keys (wizard).forEach (p => {
    const param = wizard[p];
    Goblin.registerQuest (goblinName, `change-${w}.${param.field}`, function (
      quest
    ) {
      quest.do ();
    });
    logicHandlers[`change-${w}.${param.field}`] = (state, action) => {
      param.value = action.get ('newValue');
      return state.set (`params.${w}.${param.field}`, param);
    };
  });
});

// Create a Goblin with initial state and handlers
module.exports = Goblin.configure (goblinName, logicState, logicHandlers);
