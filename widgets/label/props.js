import Type from 'goblin-gadgets/types/index.js';

export default [
  {
    name: 'text',
    group: 'main',
    type: Type.nabu,
    defaultValue: '',
  },
  {
    name: 'onClick',
    group: 'main',
    type: Type.function,
    defaultValue: '',
  },
  {
    name: 'textColor',
    group: 'aspect',
    type: Type.color,
    defaultValue: '',
  },
  {
    name: 'glyphColor',
    group: 'aspect',
    type: Type.color,
    defaultValue: '',
  },
  {
    name: 'disabled',
    group: 'main',
    type: Type.bool,
    defaultValue: false,
  },
  {
    name: 'kind',
    group: 'aspect',
    type: Type.enum([
      '',
      'big-center',
      'center-to-box',
      'compact',
      'floating-footer',
      'floating-header',
      'flying-balloon',
      'footer',
      'info',
      'large-left',
      'large-right',
      'large-single',
      'notification',
      'one-line-height',
      'pane-header',
      'task',
      'ticket-warning',
      'title',
      'title-recurrence',
    ]),
    description: 'The kind property change the style of the button.',
    defaultValue: '',
  },
  {
    name: 'shape',
    group: 'aspect',
    type: Type.shape,
    description: 'Change shape of the button.',
    defaultValue: '',
  },
  {
    name: 'active',
    group: 'aspect',
    type: Type.bool,
    defaultValue: false,
  },
  {
    name: 'maxLines',
    group: 'aspect',
    type: Type.number,
  },
  {
    name: 'skipEmptyLines',
    group: 'aspect',
    type: Type.bool,
  },
  {
    name: 'singleLine',
    group: 'aspect',
    type: Type.bool,
  },
  {
    name: 'glyph',
    group: 'glyph',
    type: Type.glyph,
    description: 'Display a glyph before text.',
    defaultValue: '',
  },
  {
    name: 'glyphRotate',
    group: 'glyph',
    type: Type.angle,
    defaultValue: '',
  },
  {
    name: 'glyphFlip',
    group: 'glyph',
    type: Type.enum(['', 'horizontal', 'vertical']),
    defaultValue: '',
  },
  {
    name: 'glyphSpin',
    group: 'glyph',
    type: Type.enum(['', 'yes']),
    defaultValue: '',
  },
  {
    name: 'glyphPosition',
    group: 'glyph',
    type: Type.enum(['', 'left', 'right']),
    defaultValue: 'left',
  },
  {
    name: 'glyphSize',
    group: 'glyph',
    type: Type.percentage,
    defaultValue: '',
  },
  {
    name: 'insideButton',
    group: 'aspect',
    type: Type.bool,
    defaultValue: false,
  },
  {
    name: 'tooltip',
    group: 'aspect',
    type: Type.string,
    defaultValue: '',
  },
  {
    name: 'justify',
    group: 'aspect',
    type: Type.justify,
    defaultValue: '',
  },
  {
    name: 'width',
    group: 'layout',
    type: Type.size,
    defaultValue: '',
  },
  {
    name: 'height',
    group: 'layout',
    type: Type.size,
    defaultValue: '',
  },
  {
    name: 'grow',
    group: 'layout',
    type: Type.grow,
    defaultValue: '',
  },
  {
    name: 'spacing',
    group: 'layout',
    type: Type.spacing,
    defaultValue: '',
  },
  {
    name: 'bottomSpacing',
    group: 'layout',
    type: Type.enum(['', 'large']),
    defaultValue: '',
  },
  {
    name: 'vpos',
    group: 'layout',
    type: Type.enum(['', 'top']),
    defaultValue: '',
  },
  {
    name: 'textColor',
    group: 'text',
    type: Type.color,
    defaultValue: '',
  },
  {
    name: 'backgroundColor',
    group: 'aspect',
    type: Type.color,
    defaultValue: '',
  },
  {
    name: 'fontSize',
    group: 'text',
    type: Type.percentage,
    defaultValue: '',
  },
  {
    name: 'fontWeight',
    group: 'text',
    type: Type.fontWeight,
    defaultValue: '',
  },
  {
    name: 'fontStyle',
    group: 'text',
    type: Type.fontStyle,
    defaultValue: '',
  },
  {
    name: 'textTransform',
    group: 'text',
    type: Type.textTransform,
    defaultValue: '',
  },
  {
    name: 'wrap',
    group: 'text',
    type: Type.enum(['', 'no', 'no-strict', 'yes', 'yes-permissive']),
    defaultValue: '',
  },
  {
    name: 'cursor',
    group: 'aspect',
    type: Type.cursor,
    defaultValue: '',
  },
  {
    name: 'show',
    group: 'aspect',
    type: Type.bool,
    defaultValue: true,
  },
  {
    name: 'visibility',
    group: 'aspect',
    type: Type.bool,
    defaultValue: true,
  },
  // GetGlyph ? GetText ?
  // Create custom function to choose a glyph or a text ?
  // ClassName ? Possibility to get a className from a parent node ?
];
